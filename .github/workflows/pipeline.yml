name: Optimized Node.js CI Workflow

# Déclenchements : push sur toutes les branches et pull_request vers master.
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - master

# Définitions des jobs
jobs:
  # Job de préparation : configure l'environnement et génère des artefacts partagés.
  prepare:
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.nvm.outputs.NVMRC }}
    steps:
      # Étape 1 : Récupération du code source
      - uses: actions/checkout@v3

      # Étape 2 : Lire la version de Node.js à partir du fichier .nvmrc
      - name: Read .nvmrc
        id: nvm
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT

  # Job de build
  build:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer le code source
      - uses: actions/checkout@v3

      # Étape 2 : Configurer la version de Node.js
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.prepare.outputs.node_version }}

      # Étape 3 : Installer les dépendances
      - name: Install dependencies
        run: npm install

      # Étape 4 : Construire le projet
      - name: Build the project
        run: npm run build

      # Étape 5 : Sauvegarder les artefacts de build
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: build/
          key: ${{ runner.os }}-build-${{ hashFiles('**/package.json') }}

  # Job pour les tests unitaires
  test-unit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer le code source
      - uses: actions/checkout@v3

      # Étape 2 : Restaurer les artefacts de build
      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: build/
          key: ${{ runner.os }}-build-${{ hashFiles('**/package.json') }}

      # Étape 3 : Configurer la version de Node.js
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.prepare.outputs.node_version }}

      # Étape 4 : Installer les dépendances
      - name: Install dependencies
        run: npm ci

      # Étape 5 : Lancer les tests unitaires
      - name: Run unit tests
        run: npm test

  # Job pour les tests NestJS
  test-nestjs:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer le code source
      - uses: actions/checkout@v3

      # Étape 2 : Restaurer les artefacts de build
      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: build/
          key: ${{ runner.os }}-build-${{ hashFiles('**/package.json') }}

      # Étape 3 : Configurer la version de Node.js
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.prepare.outputs.node_version }}

      # Étape 4 : Installer les dépendances
      - name: Install dependencies
        run: npm ci

      # Étape 5 : Lancer les tests NestJS
      - name: Run NestJS tests
        run: npm run test:nestjs

  # Job pour les tests Mocha
  test-mocha:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer le code source
      - uses: actions/checkout@v3

      # Étape 2 : Restaurer les artefacts de build
      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: build/
          key: ${{ runner.os }}-build-${{ hashFiles('**/package.json') }}

      # Étape 3 : Configurer la version de Node.js
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.prepare.outputs.node_version }}

      # Étape 4 : Installer les dépendances
      - name: Install dependencies
        run: npm ci

      # Étape 5 : Lancer les tests Mocha
      - name: Run Mocha tests
        run: npm run test:mocha
